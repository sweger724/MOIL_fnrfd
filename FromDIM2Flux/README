=====================
MILESTONING UTILITIES
=====================

This document discusses three tools used for analyzing the results of
milestoning simulations: FromDIM2Kmatrix, stationary-vector.py, and
stationary-vector. The last two utilities are equivalent and they are
designed to post-process the output of the first one.



FromDIM2Kmatrix
===============

1. Description
--------------

This program reads the data generated by dim(run) and generate the
transition matrix needed to calculate the flux (with the program
stationary-vector).

When you run dim(run) the relevant transition data is written in
output file with name dim-***.log, in lines that starts with
"dimdata", like this:

    dimdata: 2 3 3 4 4 3 3240 580 990 38 720

Meaning of the eleven numerical columns:

  1, 2: the first two integers are the ID of the anchors that were
closer at the start of the forward trajectory

  3, 4: The second two pair of integers are the anchors that are closer
at the end of the trajectory

  5, 6: The third pair of integers are the anchors that were closer at
the end of the backward trajectory (to check first hitting point)

  7: the number of time steps for forward trajectory

  8: last step the forward trajectory crossed the initial milestone

  9: number of steps from last time the trajectory crossed the initial
milestone until trajectory reaches backward milestone

 10: index of the initial configuration for the trajectory

 11: random number seed used

This program uses information in columns 1, 2, 3, 4 and 7 to construct
the transition matrix and vector of milestone lifetime.

The data from dim(run) is input in file milesinput.dat this file can
contain the data from columns 1, 2, 3, 4 and 7 (four anchor style) or
data from columns 1, 2, 3, 4, 5, 6, and 7 (six anchor style)

The number of anchor style is specified in file milesinitial.dat
milesinitial.dat contains five rows.

In first row, four variables are read:

  1: (ncolu = 4 or 6) number of anchor style used in milesinput.dat

  2: (nanc) number of anchors in your data (or maximum anchor index in your data)

  3: (dt) time step in fs

  4: (ndirec) it is 1, if going from anchor i to j defines a different
    milestone than going from anchor j -> i. It is 0, if both anchor
    transitions correspond to the same milestone

From second to fifth row we input information needed to construct
transition matrix for flux calculation (with boundary states provided
by the user):

Second row: the number of anchors identified as "initial state"

Third row: the indexes of the corresponding initial state anchors

Fourth row: the number of anchors identified as "final state"

Fifth row: the indexes of the corresponding final state anchors

2. Source code compilation
--------------------------

The program is compiled with any fortran compiler. For example:

    gfortran -o FromDIM2Kmatrix.exe FromDIM2Kmatrix.f

As written, the program can handle systems with 5000 anchors and 50000
milestones. You need to change those parameter values if your system
has larger values.

3. Support
----------

Contact alfredo at ices.utexas.edu.



stationary-vector.py
====================

1. Introduction
---------------

This program computes stationary vectors of large, sparse milestoning
matrices. From a user's perspective, the only difference between
stationary-vector.py and stationary-vector is that the former is
written in Python and may be easier to install than the latter, which
is written in C++.

2. Dependencies
---------------

The program stationary-vector.py requires a valid implementation of
the Python 3 language as well as the Numpy and SciPy packages. The
easiest way to install these dependencies is via the Anaconda
distribution. To install Anaconda, follow the steps given in
https://www.continuum.io/downloads for your system.

3. Usage
--------

The program takes a matrix as input and produces an output file
containing the (suitably normalized) stationary vector.  Run it from
the command line as follows:

python stationary-vector.py ./stationary-vector matrix-file-name lag-times-file output-file-name

4. File formats
---------------

The input matrix file is a text file that begins with a line
containing the dimension of the matrix.  The subsequent lines are of
the form: row-index whitespace column-index whitespace value.  Only
non-zero values will be read into memory.

For example, the following three lines would correspond to a 2 x 2
identity matrix:

2
1 1 1.0
2 2 1.0

The format for the vector of life times is simpler: just an index and
a corresponding lag time per line.  Absorbing milestones must be the
only ones with lag times set to exactly zero.  The following example
corresponds to a system in which the third milestone is an absorbing
one:

1 0.1
2 0.3
3 0

5. Support
----------

Contact jmb at ices.utexas.edu.

6. Citation
-----------

The stationary-vector.py program uses the mean first passage time
(MFPT) formula introduced in:

[1] Bello-Rivas, J. M., & Elber, R. (2015). Exact milestoning. The
Journal of Chemical Physics, 142(9), 094102. doi:10.1063/1.4913399

and further explained in:

[2] Bello-Rivas, J. M., & Elber, R. (2015). Simulations of
thermodynamics and kinetics on rough energy landscapes with
milestoning. Journal of Computational Chemistry. doi:10.1002/jcc.24039

Please cite the above papers if you compute the MFPT using this
software and use the results in a publication.



stationary-vector
=================

1. Introduction
---------------

This program computes stationary vectors of large, sparse milestoning
matrices.

2. Dependencies
---------------

It is necessary that some version of ARPACK [1, 2] is available on
your system.  If you don't have this library, check Section 3.1 for
instructions on how to set it up.  For convenience, we have bundled in
the dependencies folder versions of ARPACK-NG and LAPACK known to work
well with stationary-vector.

[1] https://github.com/opencollab/arpack-ng (newer version, recommended)
[2] http://www.caam.rice.edu/software/ARPACK (original version)

3. Compilation
--------------

The instructions below assume that you are using the Bash shell.  If
that is not the case, you must figure out the right way to declare
environment variables in your shell (for example, setenv VARIABLE_NAME
variable_value in TCSH, etc.).

3.1. Quick instructions to compile LAPACK and ARPACK
----------------------------------------------------

Carry out the following steps only if your system does not already
have a recent version of ARPACK installed.

1. Download LAPACK from http://www.netlib.org/lapack/#_software

2. Configure and install LAPACK:  After unpacking the tarball, do:

mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=$HOME \
      -DCMAKE_Fortran_COMPILER=gfortran \
      -DBUILD_SHARED_LIBS=ON ..
make
make install
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$HOME/lib64/pkgconfig

3. Download ARPACK from
https://github.com/opencollab/arpack-ng/releases.  After unpacking the
tarball, do:

export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$HOME/lib/pkgconfig
sh bootstrap
./configure --prefix=$HOME --with-lapack=$HOME/lib64/liblapack.so \
            --with-blas=$HOME/lib64/libblas.so
make
make install

3.2 Compiling the stationary-vector program
-------------------------------------------

Follow these steps:

export LD_LIBRARY_PATH=$HOME/lib:$HOME/lib64
mkdir build
cd build
cmake ..
make

4. Usage
--------

The program takes a matrix as input and produces an output file
containing the (suitably normalized) stationary vector.

Make sure that the required libraries can be accessed by the dynamic
linker by running:

export LD_LIBRARY_PATH=$HOME/lib:$HOME/lib64

(of course, if you have installed the dependencies in another location
you will have to point to that location instead).

Run it from the command line as follows:

./stationary-vector matrix-file-name lag-times-file output-file-name

5. File formats
---------------

The input matrix file is a text file that begins with a line
containing the dimension of the matrix.  The subsequent lines are of
the form: row-index whitespace column-index whitespace value.  Only
non-zero values will be read into memory.

For example, the following three lines would correspond to a 2 x 2
identity matrix:

2
1 1 1.0
2 2 1.0

The format for the vector of life times is simpler: just an index and
a corresponding lag time per line.  Absorbing milestones must be the
only ones with lag times set to exactly zero.  The following example
corresponds to a system in which the third milestone is an absorbing
one:

1 0.1
2 0.3
3 0

6. Support
----------

Contact jmb at ices.utexas.edu.

7. Citation
-----------

The stationary-vector program uses the mean first passage time (MFPT)
formula introduced in:

[1] Bello-Rivas, J. M., & Elber, R. (2015). Exact milestoning. The
Journal of Chemical Physics, 142(9), 094102. doi:10.1063/1.4913399

and further explained in:

[2] Bello-Rivas, J. M., & Elber, R. (2015). Simulations of
thermodynamics and kinetics on rough energy landscapes with
milestoning. Journal of Computational Chemistry. doi:10.1002/jcc.24039

Please cite the above papers if you compute the MFPT using this
software and use the results in a publication.
